#+TITLE: MetaPoet

A literate elisp document that generates all the poet themes: after a
couple of attempts at writing /elegant/ elisp I realized some literate
code would be so much better for this.

* Structure
#+NAME: structure
#+BEGIN_SRC emacs-lisp
`((default :foreground @fg :background @bg)
  (fixed-width :foreground @fg))
#+END_SRC

* Preface
#+NAME: theme-preface
#+BEGIN_SRC emacs-lisp
;; Copyright 2018-now Kunal Bhalla

;; Author: Kunal Bhalla <bhalla.kunal@gmail.com>
;; URL: https://github.com/kunalb/poet/
;; Version: 2.0

;;; Commentary:

;; Emacs has very good support for multiple fonts in a single
;; file.  Poet uses this support to make it much more convenient to
;; write prose within Emacs, with particular attention paid to
;; org-mode and markdown-mode.  Code blocks, tables, etc are
;; formatted in monospace text with the appropriate backgrounds.

;; Recommended customizations for using this theme
;;
;; - Set up the base fonts you'd like to use in Emacs before loading Poet
;;     (set-face-attribute 'default nil :family "Iosevka" :height 130)
;;     (set-face-attribute 'fixed-pitch nil :family "Iosevka")
;;     (set-face-attribute 'variable-pitch nil :family "Baskerville")
;;   On loading this theme captures the default and treats that for fixed-pitch
;;   rendering.
;;
;; - Enable variable pitch mode for editing text
;; (add-hook 'text-mode-hook
;;            (lambda ()
;;             (variable-pitch-mode 1))
;;
;; - Some other modes I like to enable/disable
;;     (olivetti-mode 1)        ;; Centers text in the buffer
;;     (flyspell-mode 1)        ;; Catch Spelling mistakes
;;     (typo-mode 1)            ;; Good for symbols like em-dash
;;     (blink-cursor-mode 0)    ;; Reduce visual noise
;;     (linum-mode 0)           ;; No line numbers for prose
;;
;; - And prettier org mode bullets:
;;     (setq org-bullets-bullet-list
;;         '("◉" "○"))
;;     (org-bullets 1)

;;; Code

#+END_SRC

* Theme Creator
#+NAME: theme-definition
#+BEGIN_SRC emacs-lisp :var palette=dark-poet-palette structure=structure theme-name="dark-poet"
(concat
 "(let ("
 (mapconcat
  (lambda (x)
    (concat "('" (car x) " \"" (cadr x) "\")"))
  (cdr palette)
  "\n      ")
 ")\n"
 " (custom-theme-set-faces '" theme-name "\n"
 (mapconcat
  (lambda (x)
    (format "  `(%s ((t %s)))"
            (car x)
            (mapcar
             (lambda (y)
               (let ((ys (symbol-name y)))
                 (if (string-prefix-p "@" ys)
                     (concat ",'" (substring ys 1))
                   y)))
             (cdr x))))
  structure
  "\n")
 ")\n"
 " (custom-theme-set-variables '" theme-name "\n"
 "  '(line-spacing .2)\n"
 "  `(fci-rule-color ,'fci)))")
#+END_SRC

* PostFace
#+NAME: theme-postface
#+BEGIN_SRC emacs-lisp
;;;###autoload
(when (and (boundp 'custom-theme-load-path)
           load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory
                (file-name-directory load-file-name))))
#+END_SRC

* Themes
** Poet
#+BEGIN_SRC emacs-lisp :tangle poet2-theme.el :noweb yes
;;; poet-dark-theme.el -- A theme for prose.

<<theme-preface>>
<<theme-postface>>

(provide-theme 'poet)
#+END_SRC

** Dark Poet
#+NAME: dark-poet-palette
| Label | Color   |
| fg    | #eeeeee |
| bg    | #111111 |

#+BEGIN_SRC emacs-lisp :tangle poet-dark-theme.el :noweb yes
;;; poet-dark-theme.el -- A dark theme for prose.

<<theme-preface>>
(deftheme poet-dark
  "A dark prose friendly theme.")

<<theme-definition(palette=dark-poet-palette, theme-name="dark-poet")>>

<<theme-postface>>

(provide-theme 'poet-dark)
#+END_SRC

** Monochrome Poet
#+BEGIN_SRC emacs-lisp :tangle poet-monochrome-theme.el :noweb yes
;;; poet-dark-theme.el -- A monochrome theme for prose.

<<theme-preface>>

<<theme-postface>>

(provide-theme 'poet-monochrome)
#+END_SRC

** Dark Monochrome Poet
#+BEGIN_SRC emacs-lisp :tangle poet-dark-monochrome-theme.el :noweb yes
;;; poet-dark-theme.el -- A dark monochrome theme for prose.

<<theme-preface>>

<<theme-postface>>

(provide-theme 'poet-dark-monochrome)
#+END_SRC
