#+TITLE: MetaPoet

A literate elisp document that generates all the poet themes: after a
couple of attempts at writing /elegant/ elisp I realized some literate
code would be so much better for this.

* Structure
#+NAME: structure
#+BEGIN_SRC emacs-lisp
;; Basics
`((default :foreground @fg :background @bg)
  (italic :foreground @emph)
  (fringe :background @bg)
  (button :inherit default :foreground @button)
  (link :foreground @link :underline (:color @link-underline :style line))
  (link-visited :inherit link :underline (:color @vlink-underline :style line))
  (escape-glyph :foreground @glyph)
  (highlight :background @hlt :overline nil)
  (lazy-highlight :background @bg-hlt)
  (region :background @bg-hlt)
  (cursor :background @cursor)
  (show-paren-match :foreground @paren-match-fg :background @paren-match-bg)
  (isearch :foreground @search-fg :background @search-bg)
  (isearch-fail :background @search-fail-bg)
  (next-error :background @bg-hlt)
  (query-replace :inherit isearch)
  (tooltip :foreground @tooltip-fg :background @tooltip-bg)
  (shadow :foreground @shadow)
  (secondary-selection :background @secondary-bg)
  (trailing-whitespace :background @trailing-bg)
  (window-divider :background @sep :foreground @sep)
  (vertical-border :background @sep :foreground @sep)

;; Mode Line
  (mode-line
   :inherit fixed-pitch
   :foreground "#111111"
   :background @bg
   :overline @sep
   :box (:line-width 3 :color @bg))
  (header-line
   :overline nil
   :background @header-line-bg
   :box (:line-width 3 :color @header-line-bg)
   :underline @sep
   :inherit mode-line)
  (mode-line-buffer-id
   :underline t)
  (mode-line-emphasis
   :weight bold)
  (mode-line-highlight
   :background "#ffffff")
  (mode-line-inactive
   :inherit mode-line
   :background @bg
   :foreground "#888888"
   :box (:color @bg :line-width 3)))
#+END_SRC

* Preface
#+NAME: theme-preface
#+BEGIN_SRC emacs-lisp
;; Copyright 2018-now Kunal Bhalla

;; Author: Kunal Bhalla <bhalla.kunal@gmail.com>
;; URL: https://github.com/kunalb/poet/
;; Version: 2.0

;;; Commentary:

;; Emacs has very good support for multiple fonts in a single
;; file.  Poet uses this support to make it much more convenient to
;; write prose within Emacs, with particular attention paid to
;; org-mode and markdown-mode.  Code blocks, tables, etc are
;; formatted in monospace text with the appropriate backgrounds.

;; Recommended customizations for using this theme
;;
;; - Set up the base fonts you'd like to use in Emacs before loading Poet
;;     (set-face-attribute 'default nil :family "Iosevka" :height 130)
;;     (set-face-attribute 'fixed-pitch nil :family "Iosevka")
;;     (set-face-attribute 'variable-pitch nil :family "Baskerville")
;;   On loading this theme captures the default and treats that for fixed-pitch
;;   rendering.
;;
;; - Enable variable pitch mode for editing text
;; (add-hook 'text-mode-hook
;;            (lambda ()
;;             (variable-pitch-mode 1))
;;
;; - Some other modes I like to enable/disable
;;     (olivetti-mode 1)        ;; Centers text in the buffer
;;     (flyspell-mode 1)        ;; Catch Spelling mistakes
;;     (typo-mode 1)            ;; Good for symbols like em-dash
;;     (blink-cursor-mode 0)    ;; Reduce visual noise
;;     (linum-mode 0)           ;; No line numbers for prose
;;
;; - And prettier org mode bullets:
;;     (setq org-bullets-bullet-list
;;         '("◉" "○"))
;;     (org-bullets 1)

;;; Code

#+END_SRC

* Theme Creator
#+NAME: theme-definition
#+BEGIN_SRC emacs-lisp :var palette=dark-poet-palette structure=structure theme-name="dark-poet"
(defun process (x)
  (cond
   ((not x) '())
   ((listp x) (cons (process (car x)) (process (cdr x))))
   ((and (symbolp x) (string-prefix-p "@" (symbol-name x)))
    (concat "," (substring (symbol-name x) 1)))
   ((stringp x) (concat "\"" x "\""))
   (t x)))

(concat
 "(let ("
 (mapconcat
  (lambda (x)
    (concat "(" (car x) " \"" (cadr x) "\")"))
  (cdr palette)
  "\n      ")
 ")\n"
 " (custom-theme-set-faces '" theme-name "\n"
 (mapconcat
  (lambda (x)
    (format "  `(%s ((t %s)))"
            (car x)
            (cdr x)))
  (process structure)
  "\n")
 ")\n"
 " (custom-theme-set-variables '" theme-name "\n"
 "  '(line-spacing .2)\n"
 "  `(fci-rule-color ,fci)))")
#+END_SRC

* PostFace
#+NAME: theme-postface
#+BEGIN_SRC emacs-lisp
;;;###autoload
(when (and (boundp 'custom-theme-load-path)
           load-file-name)
  (add-to-list 'custom-theme-load-path
               (file-name-as-directory
                (file-name-directory load-file-name))))
#+END_SRC

* Themes
** Poet
#+NAME: poet-palette
| Label           | Color   |
| fg              | #444444 |
| bg              | #e1d9c2 |
| emph            | #222222 |
| sep             | #eeeeee |
| hlt             | #efefef |
| bg-hlt          | #fff8e1 |
| muted           | #795548 |
| meta            | #4e342e |
| link            | #303f9f |
| link-underline  | #304ffe |
| vlink-underline | #1a237e |
| header          | #770b0b |
| button          | #616161 |
| glyph           | #673AB7 |
| cursor          | #333333 |
| paren-match-bg  | #ff1744 |
| paren-match-fg  | #ffffff |
| search-fg       | #c2185b |
| search-bg       | #ffffff |
| search-fail-bg  | #f8bbd0 |
| tooltip-fg      | #111111 |
| tooltip-bg      | #fff176 |
| shadow          | #999999 |
| secondary-bg    | #fff59d |
| trailing-bg     | #ff8a65 |
| header-line-bg  | #e0e0e0 |
| fci             | #dedede |

#+BEGIN_SRC emacs-lisp :tangle poet2-theme.el :noweb yes
;;; poet2-theme.el -- A theme for prose.

<<theme-preface>>
(deftheme poet2
  "A prose friendly theme.")

<<theme-definition(palette=poet-palette, theme-name="poet2")>>

<<theme-postface>>

(provide-theme 'poet2)
#+END_SRC

** Dark Poet
#+NAME: dark-poet-palette
| Label | Color   |
| fg    | #eeeeee |
| bg    | #111111 |
| emph  | #ffffff |

#+BEGIN_SRC emacs-lisp :tangle poet-dark-theme.el :noweb yes
;;; poet-dark-theme.el -- A dark theme for prose.

<<theme-preface>>
(deftheme poet-dark
  "A dark prose friendly theme.")

<<theme-definition(palette=dark-poet-palette, theme-name="poet-dark")>>

<<theme-postface>>

(provide-theme 'poet-dark)
#+END_SRC

** Monochrome Poet
#+BEGIN_SRC emacs-lisp :tangle poet-monochrome-theme.el :noweb yes
;;; poet-dark-theme.el -- A monochrome theme for prose.

<<theme-preface>>

<<theme-postface>>

(provide-theme 'poet-monochrome)
#+END_SRC

** Dark Monochrome Poet
#+BEGIN_SRC emacs-lisp :tangle poet-dark-monochrome-theme.el :noweb yes
;;; poet-dark-theme.el -- A dark monochrome theme for prose.

<<theme-preface>>

<<theme-postface>>

(provide-theme 'poet-dark-monochrome)
#+END_SRC
